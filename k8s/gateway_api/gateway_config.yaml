kind: GatewayConfiguration
apiVersion: gateway-operator.konghq.com/v1beta1
metadata:
  name: kong
  namespace: kong
spec:
  dataPlaneOptions:
    deployment:
      podTemplateSpec:
        spec:
          containers:
          - name: proxy
            image: kong:3.9.1
    network:
      services:
        ingress:
          # For the spec:
          # https://developer.konghq.com/operator/reference/custom-resources/#dataplaneserviceoptions
          type: LoadBalancer # Default is LoadBalancer anyway, but just to be explicit
          annotations:
            # After researching, kong can have only one of the 2 AWS Load Balancer types, either NLB or CLB but not ALB.
            # We can still have kong behind a alb, but we will need to provision on ourselves.
            # And put kong behind it.
            service.beta.kubernetes.io/aws-load-balancer-type: nlb
            service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
            # If we are just using NLB, we can use ip or instance as the target type.
            # If you are going to put kong behind a alb, you will need to use ip as the target type.
            service.beta.kubernetes.io/aws-load-balancer-target-type: ip
            # So you might ask, how does https work? nlb only passes TCP.
            # Even if Kong is fronted by an NLB, you can still reach your services over HTTPS in your browser, because
            # Kong controller will handle the TLS connection itself using the certificate you configure.
  controlPlaneOptions:
    deployment:
      podTemplateSpec:
        spec:
          containers:
          - name: controller
            image: kong/kubernetes-ingress-controller:3.5
            env:
            - name: CONTROLLER_LOG_LEVEL
              value: debug